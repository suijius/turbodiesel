1. Введение
===========

1.1 Определение системы интересов
---------------------------------

В данном документе описана архитектура всей системы для версии 1.0 максимально приближенно к стандарту ISO 42010 [#]_ . Документ предназначен для всех категорий потребителей.

1.2 Дополнительная информация
-----------------------------

Глоссарий
+++++++++

+--------+-------------+
| Термин | Определение |
+========+=============+
|        |             |
|        |             |
|        |             |
+--------+-------------+

История изменений документа
+++++++++++++++++++++++++++

+--------+--------------+--------------+
| Номер  | Дата         | Описание     |
| версии | выпуска      | изменений    |
+========+==============+==============+
|        |              |              |
|        |              |              |
|        |              |              |
+--------+--------------+--------------+

1.3 Введение в архитектуру
--------------------------

1.3.1 Обзор
+++++++++++

Система создана на базе Framework Django, в качестве базы данных используется MySQL. Язык написания - Python 2.7.
Использованы стандартные расширения фреймворка и модули языка Python, такие как:

* django-mptt
* pil
* django-dbtemplates
* mysql-python

В текущей версии доступ к данным осуществляется исключительно через Django ORM.

1.3.2 Оценка архитектуры
++++++++++++++++++++++++

Решение о применении той или иной технологии при разработке принималось на основании личного опыта или интереса для изучения конкретного языка программирования или инструмента.
В начальных версиях была мучительная попытка применить универсальную архитектуру Entity-Property-Value в ее самой универсальной реализации, когда данные для всех сущностей пишутся в набор таблиц сгруппированных по типам данных.
В итоге поддержка такого решения стоила очень дорого, вхождение новых людей в проект стоило очень дорого, для быстрого отображения данных пришлось придумывать обходные механизмы. Скорость выборки была чудовищно низкой.
Это был мой эпик-файл, но я получил определенный опыт и в целом такую схему можно было использовать, но со значительной переработкой архитектуры и программных решений.

Что касается самой концепции системы, то было желание сделать возможность редактирования контента, стилей, расширений без тяжеловесного инструментария, а на лету. Выбор решений при построении системы полностью соответствует поставленной цели.

1.3.3 Обоснование ключевых решений
++++++++++++++++++++++++++++++++++

* **Python**     [#]_ выбор пал на этот язык, поскольку было желание изучить его поглубже, к тому же подкупала его с-подобность и обязательная структурированность
* **Python 2.6** [#]_ изначально был выбран вариант с версией 2.6, позже перетек в версию 2.7. Версия 3 не получила одобрения из-за отсутствия необходимых для создания системы расширений языка.
* **Django**     [#]_ фреймворк с легким вхождением в разработку новых приложений. В своем составе из коробки имеет все необходимые и достаточные условия для старта работ.
* **Flask**      [#]_ после нескольких дней экспериментов отпал, как это ни странно, слишком микро-фреймворк. Очень не понравилась организация работы с несколькими файлами. Слишком много стандартных вещей необходимо делать самому, хотя можно было их и во фреймворк поместить.
* **MySQL**      [#]_ выбор пал на эту базу за простоту начала использования, никаких отрицательных эмоций ее использование не вызвало. Другие реляционные базы данных имеют функционал, который не будет задействован, а следовательно их применение выглядит излишней тратой времени на установку и трату системных ресурсов.
* **NoSQL**      [#]_ не реляционные базы рассматривались, но пока не сформировалось общее представление, как можно было бы их использовать, возможно получится вернуться к этому вопросу позже.

-----

.. [#] Стандарт описания архитектуры http://www.iso-architecture.org/42010/index.html
.. [#] Язык программирования http://www.python.org/
.. [#] Синтаксис языка разделился на 2.* и 3.* https://docs.python.org/2/
.. [#] Фреймворк для написания веб-приложений https://www.djangoproject.com/
.. [#] Фреймворк для написания веб-приложений http://flask.pocoo.org/
.. [#] Сервер реляционной базы данных http://www.mysql.com/
.. [#] Множество баз данных не использующих реляционную модель http://nosql-database.org/
